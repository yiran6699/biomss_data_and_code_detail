 r=grbio22mrgb;
x=r(:,1:46);
y=r(:,47);
% Standardize the data
x_mean = mean(x);
x_std = std(x);
y_mean = mean(y);
y_std = std(y);
xs = (x - x_mean) ./ x_std;
ys = (y - y_mean) ./ y_std;

[n, p] = size(xs); 
maxNumComponents = min(n, p); 

mse = zeros(maxNumComponents, 1);


for numComponents = 1:maxNumComponents

    cvErrors = zeros(n, 1);
    

    for i = 1:n

        X_train = xs([1:i-1, i+1:end], :);
        Y_train = ys([1:i-1, i+1:end], :);
        X_test = xs(i, :);
        Y_test = ys(i, :);
        

        [XL, YL, XS, YS, beta] = plsregress(X_train, Y_train, numComponents);
        

        Y_pred = [1, X_test] * beta;

        cvErrors(i) = (Y_test - Y_pred)^2;
    end    

    mse(numComponents) = mean(cvErrors);
end

plot(1:maxNumComponents, mse, '-o');
xlabel('Number of Components');
ylabel('Leave-One-Out Cross-Validation MSE');
title('LOOCV MSE vs. Number of Components');

[minMSE, optimalNumComponents] = min(mse);
fprintf('The optimal number of components is %d\n', optimalNumComponents);